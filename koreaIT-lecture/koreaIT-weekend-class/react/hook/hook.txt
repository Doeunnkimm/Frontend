hooks 함수

react에서 화면이 렌더링되는 조건

react -> state(상태) 구독 -> state가 변화하면 -> 가상돔 <--> 실제돔 (바뀐 부분을 렌더링)
상태를 정의할 수 있다.

class
라이프사이클
[페이지가 열렸을 때] --- [페이지가 닫혔을 때까지]
이 사이에 일어나는 이벤트나 값들을 관리

class는 다양한 기능을 지원하지만, 숙력된 React 개발자라 할지라도
기계와 사용자를 혼동시키기 때문에 class를 활용한 react는 완벽히 이해하기 힘들다.

==> 지금의 함수형 컴포넌트 등장 --> hooks 함수
즉, hooks함수는 기본적으로 사이트의 라이프사이클(페이지가 열렸을 때부터 닫혔을 때까지)의
값들이나 이벤트들을 관리하기 위해 등장했다.

1. useState
    - react의 상태관리 함수
    - state의 생성 및 갱신이 가능
    - 값이 바뀌면 화면을 리렌더

2. useRef
    - ref 객체 내부 값은 render와 상관없이 유지
    - html 요소에 접근하기 위해 사용
      react에서 dom api를 사용하는 것을 지양

3. useMemo
    - 연산된 결과 값을 반환하여 캐싱하고(저장)
      화면이 렌더링 되어도 연산 과정을 거치지 않고
      해당 값을 재사용할 수 있도록 해주는 함수

4. useCallback
    - 특정 함수를 새로 만들지 않고 (선언X) 캐싱하고
      화면이 렌더링 되었을 때 재사용할 수 있도록 해주는 함수
      복잡한 함수들은 렌더링할 때마다 선언하는 것은 문제가 있음
      (주로 비동기 통신이 필요할 때 사용함)

    
    * 메모이제이션(메모아이제이션)
        캐싱, 저장
        리액트에서는 어떤 함수가 선언되거나 연산되는 결과가 오래 걸린다면
        이 함수는 렌더링될 때마다 재선언 및 재연산을 할 필요가 있는가?

        ex) 값이 바뀌지 않는 연산, 그러면 그 연산을 매번 해줄 필요가 있는가?
            재연산하지 않고 값만 저장했다가 사용하면 될까?


5. useEffect
    마운트 / 언마운트
    (페이지실행 경우) / (페이지닫혔을 경우)

    의존성 배열(memo, callback)
    해당 배열 내부의 요소가 값이 바뀐다면 재실행