프론트엔드 41일차 목차

1. 백엔드 개요
2. Node.js 서버
3. Node/Express & React 연동

---------------------------------------------------------------

백엔드
	프론트엔드를 클라이언트, 백엔드를 서버라고도 하며
	백엔드는 웹 어플리케이션의 사용자가 보지 못하는 영역인 원격인 프로그램 및 데이터베이스를 관리하는 기술
	일반적으로 백엔드라고 하면 데이터베이스와 연동하여 동작하는 것을 말한다.

백엔드 대표적인 개발 언어
	Java
		대표적인 객체지향언어(OOP)로 가장 인기있는 서버 개발 언어이다.
		웹 개발 이외에도 모바일, 임베디드 등 다양한 분야에 사용된다.

	Python
		파이썬은 개발자들이 시스템을 효율적으로 통합하고, 빠르게 작업할 수 있게
		해주는 프로그래밍 언어로 많은 사용자에게 선택받고 있는 추세다.
		비교적 자언어와 유사하기 때문에 개발을 처음접하는 사람도 용이하게 이용가능하며,
		인공지능 영역에서 빠르게 점유율을 높여가고 있다.

	PHP
		하이퍼텍스트전처리기(Hyerptext Perprocessor)의 약자로 웹 개발 중에서
		서버 측에서 주로 사용하는 프로그래밍 언어이다.
		러닝커브(학습속도)가 짧은 편으로 초보자에게 사랑 받고 있다.

	Ruby
		일본 개발자 유키히로 마츠모토가 개발한 스크립트 형식의 개발 언어이다.
		사람이 보기 쉬운 형식으로 코드의 가독성이 높아 파이썬과 비교되곤 한다.

	Node.js(Javascript)
		Javascript 개발 언어를 사용하여 서버 프로그램을 가능하게 한 프레임워크
		Node + Express 프레임워크의 조합을 통해 서버 개발을 할 수 있다.
		즉, Node.js로 인해 프론트엔드 개발 언어였던 Javascript 언어를
		서버 영역으로 확장한 아주 큰 역할을 한 프레임워크이다.

기타용어정리
	API		HTTP 요청을 백엔드 컴퓨터에 보냈을 때 실행되는 백엔드 기능
	REST-API	API를 보다 실용성 있는 잘 정리하여 표준화한 웹 요청 호출 방식이다.
	axios		프론트엔드에서 백엔드로 데이터를 주고 받기 위한 통신 라이브러리
	express	Node에서 쉽게 웹서버를 개발할 수 있도록 도와주는 프레임워크
			프론트엔드에서 백엔드 API를 요청/응답 시 도움을 주는 도구이다.
	koa		express 개발팀이 훨씬 가볍고, 편리하게 사용가능하도록 개선하여
			오픈소스로 공개한 nodejs용 백엔드 프레임워크로 장점 중 하나인
			async/await를 편리하게 이용가능 하도록 지원한다.

Node.js
	Chrome V8 Javascript 엔진으로 빌드된 Javascript 런타임이다.
	즉, 노드를 통해 다양한 자바스크립트 애플리케이션을 개발 실행할 수 있으며
	특히 서버를 개발하고 실행하는데 가장 ㅁ낳이 사용되는 프로그램이다.

특징
	자바스크립트 언어를 활용한 개발 및 실행 환경을 제공한다.
	Non-blocking I/O와 단일 스레드 이벤트 루프를 통해 높은 처리 성능을 갖는다.
	내장 HTTP 서버 라이브러리를 포함하고 있어 웹 서버에서 아파치 등
	별도의 소프트웨어 없이 동작 가능하도록 하는 것이 가장 큰 장점이다.

Node.js가 탄생하기 전에는 일반적으로 서버 개발은 Java 언어로
클라이언트 개발은 Javascript로 개발하는 것이 국룰이었다.
하지만, 자바스크립트로 서버를 개발 가능하도록 만들어준 덕분에
프론트엔드 개발자의 개발 영역이 서버 개발자의 영역으로 넘어가게 해준 가장 큰 전환점을 제공

sync(동기)
	Java, C++ 등 객체지향언어가 일반적으로 대표적인 동기 방식 개발 언어로
	이전 작업(로직 또는 함수 수행)이 완료되어야 다음 작업을 수행할 수 있는 언어를 말한다.
	-> 순서대로 작업이 수행

async(비동기)
	동기 방식의 개발 언어와 반대로 이전 작업이 완료되지 않아도 다음 작업을 수행하여
	동시에 작업을 수행 가능하도록 하는 방식
	자바스크립트가 대표적인 비동기 방식의 개발 언어로 Node.js가 서버에서 이 방식을 동작하도록 환경 제공
	이를 비동기 방식으로 논블록킹 이라고 한다.


위와 같이 일반적으로 동기 방식인 Java, C++ 등에서는 동시 작업을 위해
스레드(멀티스레드)라는 프로그래밍 기술을 사용해 동시 작업을 수행하였다.
하지만, 스레드 기술은 큰 장점이 있지만, 개발 난이도 및 사용상 많은 어려움으로 인해
고급 기술을 가진 사람도 다루기 쉽지 않았다.
그러나 Node.js는 하나의 스레드, 논 블로킹 모델로 하나의 스레드가 알아서 여러 개의 요청을
잘 관리하여 멀티 스레드처럼 동작하게 하는 기술 덕분에 많으 개발자에게 쉽게 접근할 수 있게 해 주었다. 

처음 폴더를 만들면
1. npm init -> package.json 파일 생성
2. npm install -> package-lock.json 파일 생성
3. npm install express -save

nodemon 설치
npm install -g nodemon

nodemon 실행
nodemon --watch ./ [서버파일명]

-> 명령문이 귀찮다! 하면
package.json에 "scripts" 부분에 "원하는단어" : "nodemon --watch ./ [서버파일명]"
하게 되면 터미널에서 > npm run "원하는단어" 작성하게 되면 이전과 동일하게 nodemon으로 서버 열기 가능

























