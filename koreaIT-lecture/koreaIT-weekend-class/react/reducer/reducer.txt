전역 상태 관리

    react에서 가상 돔이 변화를 인지할 수 있게 해주는 값 = state

    props로 전달하는 값이 깊이가 깊어질(하위 컴포넌트가 많을수록) 수록
    오류 상황에서부터 에러를 추적하기가 어려워진다.

    ex) (props) ---------------------------------------> (props)
        상위 컴포넌트 -> 하위 컴포넌트 -> 하위 -> 하위 -> 하위(data)

    * 전역 관리
        모든 컴포넌트에서 사용해야 하는 상태를 독립적으로 관리하여
        어떠한 곳에서도 해당 파일(store)에서 불러서 사용할 수 있도록

-----------------------------------------------------------------------

flux 패턴

MVC 패턴 (Model, View, Controller)

action -> dispatcher -> model(store) -> view

    * action : 변경할 데이터 객체, dispatcher를 통해서 store에 전달
    * dispatcher : 데이터 흐름을 관리 (통로, 전달, 매개체)
    * store : 상태(state)의 저장소, state를 변경할 수 있는 함수 또한 가지고 있음
    * view : 화면

------------------------------------------------------------------------

전역 상태 관리를 위해 만들어진 React hook함수
useReducer
    - 상태 변경 혹은 업데이트하는 로직을 컴포넌트에서 분리

useContext
    - 전역 상태 관리를 위한 도구, 기능 자체는 redux와 동일
    - 보통은 업데이트 로직을 관리할 수 있는 reducer와 함께 사용
    - OOP를 활용한 프론트엔드 DI(의존성 주입)에 응용 가능

------------------------------------------------------------------------
redux
redux-toolkit
redux-saga

------------------------------------------------------------------------

전역 상태 관리 필요성 -> hook함수(useReducer, useContext) -> flux 패턴 기반
===> 조금 더 편리하게 만들기 위한 redux와 같은 라이브러리
