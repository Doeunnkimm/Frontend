타입스크립트

자바스크립트는 타입이 정해져있는 언어? (정적타입, 동적타입)
동적 타입언어, 컴파일 시에 값에 따라 타입이 추론되는 형태

동적타입 언어
    장점 - 개발속도
    단점 - 컴파일 시 런타임 시에 타입이 정해지기 때문에 에러 상황을 예측하기 힘들고

    ex)
        const add = (num1: number, num2: number) => num1 + num2

    결과적으로 타입스크립트는 동적 타입 언어인 자바스크립트를 정적 타입 언어로 바꾸어
    코드의 안정성을 높이고 개발자는 이 안정적인 환경이서 개발할 수 있게 된다.

    타입스크립트는 자바스크립트의 슈퍼셋
    따입스크립트(ttypescript)

---------------------------------------------------------------------------------------------

타입스크립트 사용하는 이유

(1) 동적 타입 언어인 자바스크립트 -> 정적 타입 언어
    런타임이 아닌 컴파일 과정에서 개발자가 코드를 작성하는 동안 예상치 못한 오류를 쉽게 찾을 수 있게함
    => 안정성 상승

(2) 코드 가독성 (코드의 문서화)

    type Seongyoung = {
        name: string,
        age: number,
        height: number
    }

    let seongyoung = {
        name: '김성용',
        age: 18,
        height: 195
    }

    const onclick = (person: Seongyoung) => {

    }

(3) 생산성 + 유지보수

    const onclick = (person) => {
        person.age
    }

    const onclick = (person: Seongyoung) => {
        person.name (자동완성)
    }

------------------------------------------------------------------------------------

타입스크립트의 기본타입
    number
    string
    boolean
    null
    undefined
    any
    unknown
    bigint
    symbol
    ..

타입스크립트의 객체타입
    Object
    Array
    Tuple

타입스크립트 고급타입
    * interface 
    * type alias
    *** enum, as const
    * union
    intersection
    literal
    mapped type
    * conditional type
    indexed access type
    typeof
    * partial
    required
    * readonly
    ** pick
    ** omit
    exclude
    extract
    * nonullable
    * optional
    *** returntype, generic
    instancetype

------------------------------------------------------------------------------

.ts 파일을 실행시키는 방법

    1. tsc 파일명.ts => js로 컴파일 => node 파일명.js
    2. ts-node, npx ts-node
    3. npx tsx 파일명.ts
    4. npx jiti 파일명.ts

------------------------------------------------------------------------------

