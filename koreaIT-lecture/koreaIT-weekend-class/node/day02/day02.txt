쿠키와 세션

    쿠키
        브라우저에 저장되는 key-value로 이루어진 작은 데이터 파일
        서버와의 데이터 교환이 가능

        ex)
            refresh token
            session-id

        브라우저가 닫히면 삭제, 하지만 유효기간을 명시하면 브라우저 닫혀도 삭제 X

        ex)
            자동 로그인,
            팝업창 3일동안 보지 않기

    세션
        세션은 쿠키를 기반, 그러나 브라우저에서 저장하는 쿠키와 달리
        세션은 서버 측에서 사용자 구분을 위해 사용자의 데이터를 서버에서 저장

        서버에 부담
        사용자에게 세션의 고유한 id값이 담긴 쿠키 전달
        해당 쿠키를 주고 받으면서 이 사용자가 누구인지 확인할 수 있는 로그인 방식

인증 토큰
    백엔드에서 유저임을 증명할 수 있는 키 값(idx, token)을
    백엔드 개발자가 설정한 암호화 방식과 암호화 키로 암호화하여 
    로그인 시 프론트엔드 개발자에게 전달

    프론트엔드 개발자 -> 요청 때마다 header에 실어서 백엔드에게 전달

    백엔드 개발자는 미들웨어를 생성 -> access token이 백엔드에서 설정한 키 값과 암호화 방식으로 해독
    -> DB에서 해당 유저가 있는지 확인 -> 데이터를 받아와서 다음 요청 전달

    * 암호화 방식
      암호화 키

      => jwt(JSON WEB TOKEN)은 키만 가지고 있다면, 어떠한 곳에서도 해독이 가능

API test
    Thunder 설치

----------------------------------------------------------------------------------------

ORM(Object Relational Mapping) 객체와 관계형 DB 연결
    sequelize

    type orm (가장 많이 사용)
    ** prisma orm (가장 주목하는)

    npm i mysql2 sequelize sequelize-cli
    npx sequelize init

    -> 설치된 파일
        config : DB의 연결 설정
        models : 테이블 및 스키마를 정의
        migrations : 테이블 및 데이터의 수정, 데이터를 추가
        seeders : 백업본

passport
    로그인, 회원가입, jwt 인증, 세션관리(로그인과 인증 관련 로직)
    손쉽게 구현할 수 있도록 해줌

    ** Oauth (SNS 로그인, 카카오로그인, 네이버로그인, 구글로그인)과 같은 모듈 구현을
        손쉽게 구현할 수 있도록 해줌

    => 로그인 및 유저 세션 관리, 토큰 인증을 간편하게 구현할 수 있는 라이브러리

    npm i

    passport
    passport-local

    jsonwebtoken
    passport-jwt

    bcrypt

회원가입 / 로그인 구현

---------------------------------------------------------------------------------------