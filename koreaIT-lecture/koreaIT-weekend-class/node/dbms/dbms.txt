DBMS(DataBase Management System)
    - 방대해진 데이터를 공통된 주제로 묶어(집단, 군집, 군력, 기지- base)
        쉽게 관리할 수 있도록 해주는 도구(프로그램)

    - mySql, mariaDB, Oracle, postgresQL, mySql
    - 포트번호로 연결(포트포워딩)해서 DB 서버로 운영시킬 수 있음
    - 개발자가 데이터에 접근하기 쉽게, 여러 명이서 데이터를 협업하여 운영

    - RDBMS (관계형 데이터베이스 시스템)

    Data
        의미가 있는 최소 단위의 정보와 자료

        ex) 어디사는 몇살의 누구가 남성 혹은 여성이 요리 유튜브를 시청하였다

        지역
        나이
        성별
        카테고리
        매체

-------------------------------------------------------------------------------------

    DBMS 종류
        - 계층형
        - 네트워크형
        - 관계형
        - key-value
        - NoSql

---------------------------------------------------------------------------------------

    RDBMS (Relational Database Management System)
        - 관계형 데이터 모델에 기초
        - 모든 데이터를 2차원의 테이블(행과 열로 이루어진 표 형태) 형태로 표현
        - 테이블이 서로 연관되어 있기 때문에 다른 DBMS보다 효율적으로 스키마 구성
        - 데이터 관리를 위해 SQL이라는 쿼리를 사용

-----------------------------------------------------------------------------------------

    MySQL
        Oracle과 더불어 세계에서 가장 널리 쓰이는 RDBMS 중 하나

    MySQL 데이터타입, 제약조건

        * 데이터 타입
            1. 숫자타입
                - 정수형: int, bigint
                - 소수형 : float, double

            2. 문자타입
                - char, varchar, text

            3. 날짜와 시간
                - date, dateTime, timestamp

            4. enum
                - enum('f', 'm') ==> 괄호 안에 있는 데이터만 허용

    
        * 제약조건
            1. NOT NULL : null을 저장할 수 없음 (required)
            2. UNIQUE : 중복된 값을 저장할 수 없음
            3. DEFAULT : 기본 값(값을 보내지 않았을 때 저장되는 기본 값)
            4. PRIMARY KEY, FOREIGN KEY

                primarykey : 기본키(대표키, 후보키) --- 대표키 
                            ==> 다른 데이터와 구분이 되는 키 값
                            ==> UNIQUE, NOT NULL

                foreignKey: 다른 테이블을 현재 테이블과 관계를 짓는 키
                            ==> 회원탈퇴 --> 구매내역? --> 한번에 삭제 가능
                            ==> 이상현상(예외상황) 방지

            5. AUTO_INCREMENT : 데이터를 넣지 않아도 자동으로 수가 1 증가하여 추가
                                ==> 중복값이 절대 저장되지 않음
                                ==> 단, 직접 데이터를 추가하는 것은 불가능
                                ==> 대표적으로 고유번호와 idx의 옵션으로 사용

                                ==> 요즘은 보안이 필요한 uuid로 id값을 대체하는 경우가 많음

        * 모델링
            스키마와 제약조건을 설정하는 과정
            테이블을 모델링하는 작업

                개념 모델링
                    - 이 테이블에 어떤 게 저장될까 ?

                        회원 테이블(회원가입)
                        --------------------
                        이메일
                        비밀번호
                        이름
                        전화번호
                        주소
                        개인정보동의
                        ...
                        --------------------

                논리 모델링
                    - 테이블 관계를 추상화 스키마 형성

                        고유번호 bigint | varchar --- PK
                        다른테이블의 PK --- FK
                        이메일 varchar --- NOT NULL, UNIQUE
                        비밀번호 varchar
                        이름 varchar
                        전화번호 varchar
                        주소 varchar
                        개인정보동의 int | boolean (0: 비동의, 1: 동의)
                        ...

                물리 모델링
                    - DBMS에서 테이블을 추가할 수 있도록 형체화

                        user_idx(고유번호) bigint AUTO_INCREMENT PK,
                        user_name(이름) varchar(50) NOT NULL,
                        user_email varchar(100) NOT NULL
                        ...

-------------------------------------------------------------------------------------------------

* DBMS의 언어 SQL 쿼리문

    CRUD
        [Create Read Update Delete]

    데이터베이스 생성
        create database 데이터베이스명;

    데이터베이스 사용
        use 데이터베이스명;

    데이터베이스 삭제
        drop database 데이터베이스명;

    테이블 생성
        create table 테이블명(
            필드명(컬렴명) 데이터타입 제약조건
            user_idx bigint AUTO_INCREMENT, PK
            user_name VARCHAR(300) NOT NULL,
            ...
            accept_privacy int default 0
        );

    테이블 데이터 추가
        insert into 테이블명 (컬럼명1, 컬럼명2, ...) values (데이터1, 데이터2, ...);

    테이블 데이터 조회
        select * from 테이블명; (해당 테이블의 모든 데이터 조회)
        select 컬럼명1, 컬럼명2 from 테이블명; (해당 테이블의 모든 데이터 중 해당 컬럼만)
        select * from 테이블명 where user_idx = 1; (idx값이 1번인 유저의 모든 컬럼을 조회)

    테이블 데이터 갱신
        update 테이블명 set 컬럼명 = 바꾸고 싶은 데이터 where 조건식
        ex) update tb_user set user_email="doeunnkimm@naver.com" where user_idx=13;

    데이블 데이터 삭제
        delete from 테이블명 where 조건식;

---------------------------------------------------------------------------------------------------

